/*
** winamp_js_lib.js
** a library of happy js functions, etc. to be used throughout our splendid
** sensual winamp player's html pages
*/
var bDev = false;
var aErrors = new Array();

/*
** constants - color indexes from winamp
*/
var WADLG_ITEMBG = 0;
var WADLG_ITEMFG = 1;
var WADLG_WNDBG = 2;
var WADLG_BUTTONFG = 3;
var WADLG_WNDFG = 4;
var WADLG_HILITE = 5;
var WADLG_SELCOLOR = 6;
var WADLG_LISTHEADER_BGCOLOR = 7;
var WADLG_LISTHEADER_FONTCOLOR = 8;
var WADLG_LISTHEADER_FRAME_TOPCOLOR = 9;
var WADLG_LISTHEADER_FRAME_MIDDLECOLOR = 10;
var WADLG_LISTHEADER_FRAME_BOTTOMCOLOR = 11;
var WADLG_LISTHEADER_EMPTY_BGCOLOR = 12;
var WADLG_SCROLLBAR_FGCOLOR = 13;
var WADLG_SCROLLBAR_BGCOLOR = 14;
var WADLG_SCROLLBAR_INV_FGCOLOR = 15;
var WADLG_SCROLLBAR_INV_BGCOLOR = 16;
var WADLG_SCROLLBAR_DEADAREA_COLOR = 17;
var WADLG_SELBAR_FGCOLOR = 18;
var WADLG_SELBAR_BGCOLOR = 19;
var WADLG_INACT_SELBAR_FGCOLOR = 20;
var WADLG_INACT_SELBAR_BGCOLOR = 21;
var WADLG_NUM_COLORS = 22;

var WACALLBACK_SKIN = 0;
var WACALLBACK_INFO = 1;

/*
** playlist color indexes
*/
var WADLG_PL_FG = 0;
var WADLG_PL_CURRENT_FG = 1;
var WADLG_PL_BG = 2;
var WADLG_PL_SELBAR_BG = 3;
var WADLG_PL_GENERIC_FG = 4;
var WADLG_PL_GENERIC_BG = 5;

/*
** global objects from winamp
*/
var oWa = window.external;
var oWaBrowser = new Object();
var oWaSong = new Object();
var oWaSkin = new Object();
var oWaOMedia = new Object();
var oWaAppl = new Object();
var oWaRatings = new Object();

/*
** Winamp Unique ID and Session ID
*/
var sWid; 
var sUid;

var sMaxBandwidth;
var sMinBandwidth;

var sHasWm=0;
var sHasNs=0;
var sAudits=0;

/*
** Language, Region Globals
*/
var sLang;
var sRegion;
var sLangRegion;


/*
TODO: Add other objects here

OnMedia.Config.variablename = the_cookieval
(setter and getter)

obj = OnMedia.Ratings
obj.IsXRatedALlowed()
*/

/*
** global skin colors set after a skin change event is received
*/
var sColorItemBg;
var sColorItemFg;
var sColorWndBg;
var sColorBtnFg;
var sColorWndFg;
var sColorHilite;
var sColorSel;
var sColorListHeadBg;
var sColorListHeadFont;
var sColorListHeadTop;
var sColorListHeadMid;
var sColorListHeadBot;
var sColorListHeadEmpty;
var sColorScrollFg;
var sColorScrollBg;
var sColorScrollInvFg;
var sColorScrollInvBg;
var sColorScrollEmpty;
var sColorSelbarFg;
var sColorSelbarBg;
var sColorInactSelbarFg;
var sColorInactSelbarBg;

/*
** playlist-specific colors, used with oWaSkin.GetPlaylistColor(int colorIndex)
*/
var sColorPlFg;
var sColorPlCurrentFg;
var sColorPlBg;
var sColorPlSelbar;
var sColorPlGenericFg;
var sColorPlGenericBg;

/*
** Font imformation, used with oWaSkin.GetFontName() and oWaSkin.GetFontSize
*/
var sFontName;
var sFontSize;

/*
** debug - same as alert, only happens id dev mode is set to true
*/
function debug(s)
  {
  if( bDev ) alert(s);
  }

/*
** debug - same as alert, only happens id dev mode is set to true
*/
function getError(sModule,sErrorMsg)
  {
  var msg = new Array();
  msg["module"] = sModule;
  msg["error"] = sErrorMsg;
  return msg;
  }

/*
** user-overwriteable functions
*/
function waOnPageLoad(){}
function waOnPageUnload(){}
function waOnSkinChange(){}
function waOnInfoChange(){}

/*
** onInfoChange
*/
function onInfoChange()
  {
  waOnInfoChange();
  }

/*
** onSkinChange
*/
function onSkinChange()
  {
  updateSkinColors();
  waOnSkinChange();
  }


/*
** onPageLoad - handler defined at the end of this js file, fires after page loading is complete
*/
function onPageLoad() 
  {
  // load application object
  try 
    {
    oWaAppl = oWa.Application();
    } 
  catch(e)
    {
    aErrors.push(getError("Application",e.message));
    }

  // load media core object
  try 
    {
    if( oWa.MediaCore.IsRegisteredExtension(".wmv") || oWa.MediaCore.IsRegisteredExtension(".wma") )
      sHasWm = 1;
		else
      sHasWm = 0;

    if ( oWa.MediaCore.IsRegisteredExtension(".nsv") || oWa.MediaCore.IsRegisteredExtension(".nsa") )
      sHasNs = 1;
    else
      sHasNs = 0;
		}
  catch(e)
    {
    aErrors.push(getError("MediaCore",e.message));
    }

  try
	{
		wver = oWa.Application.Version();
		if ( wver >= 5.22 ) sAudits=1;
		
	}
	catch(e)
	{
		sAudits = 0;
	}

  // load localization object
  try
    {
    sLang = oWaAppl.GetLanguage();
    sRegion = oWaAppl.GetCountry();
    sLangRegion = oWaAppl.GetLocale();
    }
  catch(e)
    {
    sLang = "en";
    sRegion = "US";
    sLangRegion = "en-US";
    }

  // load online services object
  try 
    {
    oWaOMedia = oWa.OnMedia();
    sWid = oWaOMedia.GetUniqueID;
    sUid = oWaOMedia.GetSessionID;
    oWaRatings = oWa.MediaLibrary.OnlineMedia.Ratings;
            
    sMaxBandwidth = oWaOMedia.Config.maxbandwidth;
    sMinBandwidth = oWaOMedia.Config.minbandwidth;
    } 
  catch(e) 
    {
    aErrors.push(getError("OnMedia",e.message));
    }
        
  // load browser object
  try 
    {
    oWaBrowser = oWa.Browser();
    //oWaBrowser.SetSize(531,256); // the minimum minibrowser component's size
    } 
  catch(e) 
    {
    aErrors.push(getError("Browser",e.message));
    }
    
  // load current song object
  try 
    {
    oWaSong = oWa.CurrentSong();
    //oWaSong.RegisterMetadataCallback(onInfoChange);
    oWaSong.RegisterTitleChangeCallback(onInfoChange);
    updateSongInfo();
    } 
  catch(e) 
    {
    aErrors.push(getError("CurrentSong",e.message));
    }

  // load current skin object
  try 
    {
    oWaSkin = oWa.CurrentSkin();
    oWaSkin.RegisterSkinChangeCallback(onSkinChange);
    onSkinChange(); // must fake a skin change on initial page load, to avoid a black empty window :)
    } 
  catch(e) 
    {
    aErrors.push(getError("CurrentSkin",e.message));
    }
        
        
  waOnPageLoad();
  }

/*
** onPageUnload - handler defined at the end of this js file, fires when user navigates away from page
*/
function onPageUnload() 
  {
  try 
    {
    //if ( oWaSong ) oWaSong.UnregisterMetadataCallback(onInfoChange);
    if ( oWaSong ) oWaSong.UnregisterTitleChangeCallback(onInfoChange);
    if ( oWaSkin ) oWaSkin.UnregisterSkinChangeCallback(onSkinChange);
    }
  catch(e) { /* die gracefully */ }

  waOnPageUnload();
  }

/*
** updateSkinColors - called from onSkinChange to set the latest skin colors
** returns array of updated skin colors
*/
function updateSkinColors(){
    // globals for anyone who wants 'em!
    sColorItemBg = oWaSkin.GetColor(WADLG_ITEMBG);
    sColorItemFg = oWaSkin.GetColor(WADLG_ITEMFG);
    sColorWndBg = oWaSkin.GetColor(WADLG_WNDBG);
    sColorBtnFg = oWaSkin.GetColor(WADLG_BUTTONFG);
    sColorWndFg = oWaSkin.GetColor(WADLG_WNDFG);
    sColorHilite = oWaSkin.GetColor(WADLG_HILITE);
    sColorSel = oWaSkin.GetColor(WADLG_SELCOLOR);
    sColorListHeadBg = oWaSkin.GetColor(WADLG_LISTHEADER_BGCOLOR);
    sColorListHeadFont = oWaSkin.GetColor(WADLG_LISTHEADER_FONTCOLOR);
    sColorListHeadTop = oWaSkin.GetColor(WADLG_LISTHEADER_FRAME_TOPCOLOR);
    sColorListHeadMid = oWaSkin.GetColor(WADLG_LISTHEADER_FRAME_MIDDLECOLOR);
    sColorListHeadBot = oWaSkin.GetColor(WADLG_LISTHEADER_FRAME_BOTTOMCOLOR);
    sColorListHeadEmpty = oWaSkin.GetColor(WADLG_LISTHEADER_EMPTY_BGCOLOR);
    sColorScrollFg = oWaSkin.GetColor(WADLG_SCROLLBAR_FGCOLOR);
    sColorScrollBg = oWaSkin.GetColor(WADLG_SCROLLBAR_BGCOLOR);
    sColorScrollInvFg = oWaSkin.GetColor(WADLG_SCROLLBAR_INV_FGCOLOR);
    sColorScrollInvBg = oWaSkin.GetColor(WADLG_SCROLLBAR_INV_BGCOLOR);
    sColorScrollEmpty = oWaSkin.GetColor(WADLG_SCROLLBAR_DEADAREA_COLOR);
    sColorSelbarFg = oWaSkin.GetColor(WADLG_SELBAR_FGCOLOR);
    sColorSelbarBg = oWaSkin.GetColor(WADLG_SELBAR_BGCOLOR);
    sColorInactSelbarFg = oWaSkin.GetColor(WADLG_INACT_SELBAR_FGCOLOR);
    sColorInactSelbarBg = oWaSkin.GetColor(WADLG_INACT_SELBAR_BGCOLOR);
    
    sColorPlFg = oWaSkin.GetPlaylistColor(WADLG_PL_FG);
    sColorPlCurrentFg = oWaSkin.GetPlaylistColor(WADLG_PL_CURRENT_FG);
    sColorPlBg = oWaSkin.GetPlaylistColor(WADLG_PL_BG);
    sColorPlSelbar = oWaSkin.GetPlaylistColor(WADLG_PL_SELBAR_BG);
    sColorPlGenericFg = oWaSkin.GetPlaylistColor(WADLG_PL_GENERIC_FG);
    sColorPlGenericBg = oWaSkin.GetPlaylistColor(WADLG_PL_GENERIC_BG);
    
    sFontName = oWaSkin.GetFontName();
    sFontSize = oWaSkin.GetFontSize();
    
    /*
    playlist color notes:
    0 - text color - playlist
    1 - text color - currently playing playlist entry
    2 - background color - playlist
    3 - background color - selected playlist entry
    4 - text color - video window info, minibrowser info 
    5 - background - video window info, minibrowser info
    */
    
    // our return array for anyone who wants it!
    var colors = new Array();
    colors[0] = sColorItemBg;
    colors[1] = sColorItemFg;
    colors[2] = sColorWndBg;
    colors[3] = sColorBtnFg;
    colors[4] = sColorWndFg;
    colors[5] = sColorHilite;
    colors[6] = sColorSel;
    colors[7] = sColorListHeadBg;
    colors[8] = sColorListHeadFont;
    colors[9] = sColorListHeadTop;
    colors[10] = sColorListHeadMid;
    colors[11] = sColorListHeadBot;
    colors[12] = sColorListHeadEmpty;
    colors[13] = sColorScrollFg;
    colors[14] = sColorScrollBg;
    colors[15] = sColorScrollInvFg;
    colors[16] = sColorScrollInvBg;
    colors[17] = sColorScrollEmpty;
    colors[18] = sColorSelbarFg;
    colors[19] = sColorSelbarBg;
    colors[20] = sColorInactSelbarFg;
    colors[21] = sColorInactSelbarBg;
    colors[22] = sColorPlFg;
    colors[23] = sColorPlCurrentFg;
    colors[24] = sColorPlBg;
    colors[25] = sColorPlSelbar;
    colors[26] = sColorPlGenericFg;
    colors[27] = sColorPlGenericBg;
    
    // our premade class color changer for anyone who wants it!
    var cur_div = "";
    var doc_length = document.all.length;
    try{
        for( i = 0; i < doc_length; i++ ){
            cur_div = document.all[i];
            switch( cur_div.className ){
                case "waItem"           : cur_div.style.background = sColorItemBg;
                                          cur_div.style.color = sColorItemFg;
                                          cur_div.style.fontFamily  = sFontName;
                                          cur_div.style.fontSize = sFontSize + "px";
                                          break;
                case "waItemBg"         : cur_div.style.background = sColorItemBg; break;
                case "waItemFg"         : cur_div.style.background = sColorItemFg; break;
                case "waWndBg"          : cur_div.style.background = sColorWndBg; break;
                case "waBtnFg"          : cur_div.style.background = sColorBtnFg; break;
                case "waWndFg"          : cur_div.style.background = sColorWndFg; break;
                case "waHilite"         : cur_div.style.background = sColorHilite; break;
                case "waSel"            : cur_div.style.background = sColorSel; break;
                case "waListHeadBg"     : cur_div.style.background = sColorListHeadBg; break;
                case "waListHeadFont"   : cur_div.style.background = sColorListHeadFont; break;
                case "waListHeadTop"    : cur_div.style.background = sColorListHeadTop; break;
                case "waListHeadMid"    : cur_div.style.background = sColorListHeadMid; break;
                case "waListHeadBot"    : cur_div.style.background = sColorListHeadBot; break;
                case "waListHeadEmpty"  : cur_div.style.background = sColorListHeadEmpty; break;
                case "waScrollFg"       : cur_div.style.background = sColorScrollFg; break;
                case "waScrollBg"       : cur_div.style.background = sColorScrollBg; break;
                case "waScrollInvFg"    : cur_div.style.background = sColorScrollInvFg; break;
                case "waScrollInvBg"    : cur_div.style.background = sColorScrollInvBg; break;
                case "waScrollEmpty"    : cur_div.style.background = sColorScrollEmpty; break;
                case "waSelbarFg"       : cur_div.style.background = sColorSelbarFg; break;
                case "waSelbarBg"       : cur_div.style.background = sColorSelbarBg; break;
                case "waInactSelbarFg"  : cur_div.style.background = sColorInactSelbarFg; break;
                case "waInactSelbarBg"  : cur_div.style.background = sColorInactSelbarBg; break;
                case "waPlFg"           : cur_div.style.background = sColorPlFg; break;
                case "waPlCurrentFg"    : cur_div.style.background = sColorPlCurrentFg; break;
                case "waPlBg"           : cur_div.style.background = sColorPlBg; break;
                case "waPlSelbar"       : cur_div.style.background = sColorPlSelbar; break;
                case "waPlGenericFg"    : cur_div.style.background = sColorPlGenericFg; break;
                case "waPlGenericBg"    : cur_div.style.background = sColorPlGenericBg; break;
            }
                
            // white on white error checking!
            if( cur_div.style.color == "#ffffff" && cur_div.style.background == "#ffffff" ){
                cur_div.style.color = "#000000";
            }
        }
    }catch(e){
    }
    
    // don't forget los scrollbaros!
    // Only set if body is present!
    if( document.body ){
        document.body.style.scrollbarFaceColor = sColorListHeadBg;
        document.body.style.scrollbarTrackColor = sColorScrollBg;
        document.body.style.scrollbar3dLightColor = sColorListHeadTop;
        document.body.style.scrollbarShadowColor = sColorListHeadBg;
        document.body.style.scrollbarDarkShadowColor = sColorListHeadBot;
        document.body.style.scrollbarHighlightColor = sColorListHeadBg;
        document.body.style.scrollbarArrowColor = sColorBtnFg; 
    }
    
    /* alt scroll colors
    document.body.style.scrollbarFaceColor = sColorScrollInvFg;
    document.body.style.scrollbarTrackColor = sColorScrollBg;
    document.body.style.scrollbar3dLightColor = sColorSelbarFg; 
    document.body.style.scrollbarShadowColor = sColorScrollInvFg;
    document.body.style.scrollbarDarkShadowColor = sColorSelbarFg;
    document.body.style.scrollbarHighlightColor = sColorScrollInvFg;
    document.body.style.scrollbarArrowColor = sColorSelbarFg;
    */
    
    return colors;
}

/*
** updateSongInfo - called from onInfoChange
*/
function updateSongInfo(){
}

function changeClassAttrib(class_name, element_name, new_value){
    if( !document.all ) return;
    var doc_length = document.all.length;
   
    try{
        for( i = 0; i < doc_length; i++ ){
            var cur_div = document.all[i];
            if(typeof(class_name) == "object"){
                for(j = 0; j < class_name.length; j++){
                    if( cur_div.className == class_name[j] ){
                        cur_div.style[(typeof(element_name) == "object") ? element_name[j] : element_name] = (typeof(new_value) == "object") ? new_value[j] : new_value;
                    }
                }
            }else{
                if( cur_div.className == class_name ){
                    cur_div.style[element_name] = new_value;
                }
            }
        }
    }
    catch(e){
    }
}

String.prototype.trim = function(){ return this.replace(/^\s+|\s+$/, ''); };

var assetLaunchUrl;
var assetTitle = "";
function showMenu(url,mtitle){
    assetLaunchUrl = url;
    assetTitle = mtitle;
    var e = window.event;
    var scroll_offset_x = document.body.scrollLeft;
    var scroll_offset_y = document.body.scrollTop;
    
    // adj menu's x,y according to frame's scroll amount
    if(document.getElementById("waMenu")){
        var menu = document.getElementById("waMenu");
        menu.style.display = "block";
        
        // check x bounds
        if(e.clientX + scroll_offset_x >= (document.body.scrollWidth - 80)){
            menu.style.left = e.clientX - 74 + scroll_offset_x + "px";
        }else{
            menu.style.left = e.clientX - 6 + scroll_offset_x + "px";
        }
        
        // check y bounds
        if(e.clientY + scroll_offset_y >= (document.body.scrollHeight - 44)){
            menu.style.top = e.clientY - 38 + scroll_offset_y + "px";
        }else{
            menu.style.top = e.clientY - 6 + scroll_offset_y + "px";
        }
    }
}
function hideMenu(){
    if(document.getElementById("waMenu"))
        document.getElementById("waMenu").style.display = "none";
}
function onRollOutMenu(e){
    if (!e) var e = window.event;
    
    var tg = (window.event) ? e.srcElement : e.target;
    if (tg.nodeName != 'DIV') return;
    
    var reltg = (e.relatedTarget) ? e.relatedTarget : e.toElement;
    while (reltg != tg && reltg.nodeName != 'BODY')
        reltg = reltg.parentNode;
    if (reltg == tg) return;
    
    // Mouseout took place when mouse actually left menu layer
    setTimeout("hideMenu()", 500);
}
function onClickMenu(cmd){
    if(cmd == "play")
        oWaOMedia.PlayUrl(assetLaunchUrl);
    else if(cmd == "enq")
        oWaOMedia.EnqueueUrl(assetLaunchUrl);
    else if(cmd == "book")
	{
		if ( oWa.Bookmarks )
		{
			oWa.Bookmarks.Add(assetLaunchUrl,assetTitle);
		}
		else
			oWaOMedia.EnqueueUrl(assetLaunchUrl);
	}
}

/*
** disable right click
*/
document.oncontextmenu = new Function("return false");
document.onmouseup = hideMenu;